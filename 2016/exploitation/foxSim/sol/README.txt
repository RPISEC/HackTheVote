This challenge was a source only pwnable based on a aliasing bug with -O2. Also not all the source code was given.

Intended solution outline:
- In the source in assignVotes, a voter and a candidate can become aliased, and -02 optimization causes an incorrect return value.
    o If the person is the same as the candidate, it sets the voteMessage to a constant string, which should change votesToGive as well, but the return is incorrect, so it instead returns the original votesToGive value.
    o Then when going to print the error message, it instead tries print the votes (if it is > than the address of main)
    o This will print what ever point is given, allowing memory to be leaked up to a null

- Now with an arbitrary read, we can dump the binary and reverse the missing code.
- We can also leak libc addresses and dump libc (or take it from some other challenge)
- Reversing the missing NWO.h header, we see that if a real candidate is used, they can add as many votes as they want.
- Our goal now is to find a collision with a real candidate and use them to hit this code.
    o Jeb! collides with 123
- The candidate struct is larger than the person struct, so this type confusion allows us to write outside of the buffer, and happens to line up with the function pointer, so we can add an offset to the original pointer.
- Now we just have to call libc stuff
- Easiest way is to use a single execve("/bin/sh",NULL,NULL) gadget in libc.
- Replace the second person's function with this pointer
- Get shell 
